<?xml version="1.0" encoding="UTF-8"?>
<project name="Sencha Touch 2 + Cordova">

	<!--Scaffold an Application in the www folder using Sencha's project building functionality -->
	<target name="01. Create App" unless="" depends="_global.set_properties">
		<condition property="do.abort">
			<equals arg1="true" arg2="${project.root.present}"/>
		</condition>
		<fail if="do.abort">Creation aborted, Project root exists.</fail>
		<input message="Project Name" addproperty="project.name" defaultvalue="${SENCHA_PROJECT_NAME}"/>
		<condition property="do.abort">
			<or>
				<equals arg1="" arg2="${project.name}"/>
				<contains string="${project.name}" substring=" "/>
			</or>
		</condition>
		<fail if="do.abort">Creation aborted, App Name is empty or contains spaces</fail>
		<mkdir dir="${project.root}"/>
		<exec searchpath="true" executable="${sencha.command}" dir="${SENCHA_SDK_HOME}">
			<env key="SENCHA_SDK_TOOLS_2_0_0_BETA3" value="${SENCHA_SDK_TOOLS_HOME}"/>
			<arg value="app"/>
			<arg value="create"/>
			<arg value="${project.name}"/>
			<arg value="${project.root}"/>
		</exec>
	</target>

	<!--Compile SASS using Compass-->
	<target name="02. Compass Compile" depends="_windows.compass_compile, _osx.compass_compile"/>

	<!--Open a prompt with Compass Watch for monitored SASS updates-->
	<target name="02. Compass Watch" depends="_global.set_properties, _windows.compass_watch, _osx.compass_watch"/>

	<!--Build the Sencha app for Testing-->
	<target name="03. Build - Testing">
		<antcall target="_sencha.build">
			<param name="buildType" value="testing"/>
		</antcall>
	</target>

	<!--Build the Sencha App for Production-->
	<target name="03. Build - Production">
		<antcall target="_sencha.build">
			<param name="buildType" value="production"/>
		</antcall>
	</target>

	<!--Build the Sencha App for Packaging-->
	<target name="03. Build - Package">
		<antcall target="_sencha.build">
			<param name="buildType" value="package"/>
		</antcall>
	</target>

	<!--Build the Sencha App for Native using packager.json-->
	<target name="03. Build - Native">
		<antcall target="_sencha.build">
			<param name="buildType" value="native"/>
		</antcall>
	</target>

	<!--Build Sencha app for Testing and move to Cordova Project Folder-->
	<target name="04. Build Testing for Cordova">
		<antcall target="_cordova.build">
			<param name="type" value="testing"/>
		</antcall>
	</target>

	<!--Build Sencha app as Packaged (local file access) and move to Cordova Project Folder-->
	<target name="04. Build Release for Cordova">
		<antcall target="_cordova.build">
			<param name="type" value="package"/>
		</antcall>
	</target>

	<!--Build Sencha App for Production and ZIP for uploading onto Cordova Build-->
	<target name="05. Package Testing for Cordova Build" depends="03. Build - Testing">
		<replace file="${project.root}/build/testing/index.html" token='"js":['
				 value='"js":[{"path":"cordova.js","type":"js"},'/>
		<zip destfile="${project.root}/build/cordova/build/CordovaBuild_Testing.zip" basedir="${project.root}/build/testing"
			 excludes="app.json"/>
		<replace file="${project.root}/build/testing/index.html" value='"js":['
				 token='"js":[{"path":"cordova.js","type":"js"},'/>
	</target>

	<!--Build Sencha App as Package and ZIP for uploading onto Cordova Build-->
	<target name="05. Package Release for Cordova Build" depends="03. Build - Package">
		<replace file="${project.root}/build/package/index.html" token='"js":['
				 value='"js":[{"path":"cordova.js","type":"js"},'/>
		<zip destfile="${project.root}/build/cordova/build/CordovaBuild_Release.zip" basedir="${project.root}/build/package"
			 excludes="app.json"/>
		<replace file="${project.root}/build/package/index.html" value='"js":['
				 token='"js":[{"path":"cordova.js","type":"js"},'/>
	</target>

	<!--Cleans the build folder-->
	<target name="06. Clean - All">
		<antcall target="06. Clean - Sencha Build Folder"/>
		<antcall target="06. Clean - iOS WWW Folder"/>
		<antcall target="06. Clean - Android WWW Folder"/>
	</target>

	<!--Cleans the build folder-->
	<target name="06. Clean - Sencha Build Folder">
		<delete dir="${project.root}\build"/>
	</target>

	<!--Cleans iOS build folder-->
	<target name="06. Clean - iOS WWW Folder" if="${cordova.copy.ios.enabled}">
		<delete dir="${CORDOVA_IOS_PATH}"/>
		<mkdir dir="${CORDOVA_IOS_PATH}"/>
	</target>

	<target name="06. Clean - Android WWW Folder" if="${cordova.copy.android.enabled}">
		<delete dir="${CORDOVA_ANDROID_PATH}"/>
		<mkdir dir="${CORDOVA_ANDROID_PATH}"/>
	</target>

	<!-- Upgrades the current application to the selected sencha SDK -->
	<target name="07. Upgrade App to Sencha SDK" depends="_global.set_properties">
		<exec searchpath="true" executable="${sencha.command}" dir="${SENCHA_SDK_HOME}">
			<env key="SENCHA_SDK_TOOLS_2_0_0_BETA3" value="${SENCHA_SDK_TOOLS_HOME}"/>
			<arg value="app"/>
			<arg value="upgrade"/>
			<arg value="${project.root}"/>
		</exec>
	</target>

	<target name="08. Launch Documentation">
		<exec executable="cmd.exe" osfamily="Windows">
			<arg line="/C start ${SENCHA_SDK_HOME}\docs\index.html"/>
		</exec>
	</target>
	<!--Cross Platform EXEC Targets-->

	<!--(PRIVATE) Cross Platform Common Build target-->
	<target name="_sencha.build" depends="_global.set_properties">
		<!--<delete dir="${project.root}\build\${buildType}"/>-->
		<exec executable="${sencha.command}" dir="${project.root}">
			<env key="SENCHA_SDK_TOOLS_2_0_0_BETA3" value="${SENCHA_SDK_TOOLS_HOME}"/>
			<arg value="app"/>
			<arg value="build"/>
			<arg value="${buildType}"/>
		</exec>
	</target>

	<!-- (PRIVATE) Build Local Phone Gap Apps for Cordova -->
	<target name="_cordova.build" >
		<delete dir="${project.root}/build/${type}"/>

		<antcall target="_cordova.ios.build">
			<param name="type" value="${type}"/>
		</antcall>

		<antcall target="_cordova.android.build">
			<param name="type" value="${type}"/>
		</antcall>

		<delete dir="${project.root}/build/${type}"/>
	</target>

	<!-- (PRIVATE) Build Local Phone Gap Apps for Cordova on iOS -->
	<target name="_cordova.ios.build" if="${cordova.build.ios.enabled}">
		<copy file="${project.root}/app.json" tofile="${project.root}/app_original.json"/>

		<!--Copy iOS Specific Files to the iOS folder-->
		<copy todir="${cordova.build.root}">
			<fileset dir="${CORDOVA_IOS_JS}">
				<include name="**"/>
				<exclude name="app.json"/>
			</fileset>
		</copy>

		<!--Copies Common Cordova Files-->
		<antcall target="_cordova.common.build"/>

		<!-- Merge the JSON Files and build the app for iOS-->
		<build_app_for_os type="${type}" app_file="${project.root}/app.json" os_app_file="${CORDOVA_IOS_JS}/app.json" common_app_file="${CORDOVA_COMMON_JS}/app.json"/>

		<!--Remove the iOS Specific files-->
		<move file="${project.root}/app_original.json" tofile="${project.root}/app.json" overwrite="true"/>
		<delete dir="${cordova.build.root}"/>

		<move todir="${cordova.root.ios}/${type}">
			<fileset dir="${project.root}/build/${type}">
				<include name="**"/>
				<exclude name="app.json"/>
			</fileset>
		</move>

		<antcall target="_cordova.copy.ios" >
			<param name="type" value="${type}"/>
		</antcall>
	</target>


	<!-- (PRIVATE) Build Local Phone Gap Apps for Cordova on Android -->
	<target name="_cordova.android.build" if="${cordova.build.android.enabled}">
		<copy file="${project.root}/app.json" tofile="${project.root}/app_original.json"/>

		<!--Copy Android Specific Files to the Cordova folder-->
		<copy todir="${cordova.build.root}">
			<fileset dir="${CORDOVA_ANDROID_JS}">
				<include name="**"/>
				<exclude name="app.json"/>
			</fileset>
		</copy>

		<!--Copies Common Cordova Files-->
		<antcall target="_cordova.common.build"/>

		<!-- Merge the JSON Files and build the app for iOS-->
		<build_app_for_os type="${type}" app_file="${project.root}/app.json" os_app_file="${CORDOVA_ANDROID_JS}/app.json" common_app_file="${CORDOVA_COMMON_JS}/app.json"/>

		<!--Remove the iOS Specific files-->
		<move file="${project.root}/app_original.json" tofile="${project.root}/app.json" overwrite="true"/>
		<delete dir="${cordova.build.root}"/>

		<move todir="${cordova.root.android}/${type}">
			<fileset dir="${project.root}/build/${type}">
				<include name="**"/>
				<exclude name="app.json"/>
			</fileset>
		</move>

		<antcall target="_cordova.copy.android" >
			<param name="type" value="${type}"/>
		</antcall>
	</target>

	<!--(PRIVATE) Copies Common Cordova files into proper folder-->
	<target name="_cordova.common.build" if="${cordova.build.common.enabled}">
		<copy todir="${cordova.build.root}">
			<fileset dir="${CORDOVA_COMMON_JS}">
				<include name="**"/>
				<exclude name="app.json"/>
			</fileset>
		</copy>
	</target>

	<!--(PRIVATE) Windows Compass Compile EXEC Target-->
	<target name="_windows.compass_compile" if="${os.isWindows}" depends="_global.set_properties">
		<exec executable="${RUBY_HOME}/bin/${ruby.command}" dir="${sass.root}">
			<arg value="${RUBY_HOME}/bin/compass"/>
			<arg value="compile"/>
		</exec>
	</target>

	<!--(PRIVATE) OSX Compass Compile EXEC Target-->
	<target name="_osx.compass_compile" unless="${os.isWindows}">
		<exec executable="compass" dir="${sass.root}">
			<arg value="compile"/>
		</exec>
	</target>

	<!--(PRIVATE) Windows Compass Watch EXEC Target-->
	<target name="_windows.compass_watch" if="${os.isWindows}">
		<exec executable="cmd" dir="${sass.root}">
			<arg line="/c start cmd.exe /k ${RUBY_HOME}\bin\${ruby.command} '${RUBY_HOME}\bin\compass' watch"/>
		</exec>
	</target>

	<!--(PRIVATE) OSX Compass Watch EXEC Target-->
	<target name="_osx.compass_watch" unless="${os.isWindows}">
		<applescript>
			<![CDATA[ tell application "Terminal"
	      do script "compass watch ${sass.root}"
	      end tell ]]>
		</applescript>
	</target>

	<!--Property Settings-->
	<property file="app.properties"/>
	<property file="build.properties"/>
	<dirname property="build.root" file="${ant.file.Sencha Touch 2 + Cordova}"/>

	<condition property="os.isWindows">
		<os family="windows"/>
	</condition>

	<!--Macro Definition for OSX used to launch terminal-->
	<macrodef name="applescript">
		<text name="text.script" trim="false" optional="false"/>
		<sequential>
			<exec executable="/usr/bin/osascript" inputstring="@{text.script}"/>
		</sequential>
	</macrodef>

	<!-- Preset Variables based on Sencha Souch Project Template -->
	<property name="project.root" value="${build.root}/www"/>
	<property name="cordova.root" value="${project.root}/build/cordova"/>
	<property name="cordova.root.android" value="${cordova.root}/android"/>
	<property name="cordova.root.ios" value="${cordova.root}/ios"/>
	<property name="cordova.build.root" value="${project.root}/cordova"/>
	<property name="CORDOVA_COMMON_JS" value="NULL"/>

	<property name="sass.root" value="${project.root}/resources/sass"/>
	<available file="${project.root}" type="dir" property="project.root.present"/>

	<!-- Determines if an iOS Cordova JS file has been specified for cordova building -->
	<condition property="cordova.build.ios.enabled" value="true" else="false">
		<and>
			<isset property="CORDOVA_IOS_JS"/>
			<not>
				<equals arg1="${CORDOVA_IOS_JS}" arg2="null"/>
			</not>
			<available file="${CORDOVA_IOS_JS}/app.json"/>
		</and>
	</condition>

	<!-- Determines if an Android Cordova JS file has been specified for cordova building -->
	<condition property="cordova.build.android.enabled" value="true" else="false">
		<and>
			<isset property="CORDOVA_ANDROID_JS"/>
			<not>
				<equals arg1="${CORDOVA_ANDROID_JS}" arg2="null"/>
			</not>
			<available file="${CORDOVA_ANDROID_JS}/app.json"/>
		</and>
	</condition>

	<!-- Determines if an Common path has been set for automatic copying -->
	<condition property="cordova.build.common.enabled" value="true" else="false">
		<and>
			<isset property="CORDOVA_COMMON_JS"/>
			<not>
				<equals arg1="${CORDOVA_COMMON_JS}" arg2="null"/>
			</not>
			<available file="${CORDOVA_COMMON_JS}/app.json"/>
		</and>
	</condition>

	<!-- Determines if an iOS path has been set for automatic copying -->
	<condition property="cordova.copy.ios.enabled" value="true" else="false">
		<and>
			<isset property="CORDOVA_IOS_PATH"/>
			<not>
				<equals arg1="${CORDOVA_IOS_PATH}" arg2="null"/>
			</not>
		</and>
	</condition>

	<!-- Determines if an Android path has been set for automatic copying -->
	<condition property="cordova.copy.android.enabled" value="true" else="false">
		<and>
			<isset property="CORDOVA_ANDROID_PATH"/>
			<not>
				<equals arg1="${CORDOVA_ANDROID_PATH}" arg2="null"/>
			</not>
		</and>
	</condition>

	<!--Cross Platform Property Setters-->
	<target name="_global.set_properties" depends="_windows.setProps, _osx.setProps"/>

	<!--(PRIVATE) Sets up all the ANT variables for Windows -->
	<target name="_windows.setProps" if="${os.isWindows}">
		<property name="sencha.command" value="${SENCHA_SDK_TOOLS_HOME}\sencha.bat"/>
		<property name="compass.command" value="compass.bat"/>
		<property name="ruby.command" value="ruby.exe"/>
	</target>

	<!--(PRIVATE) Sets up all the ANT variables for OSX -->
	<target name="_osx.setProps">
		<property name="sencha.command" value="${SENCHA_SDK_TOOLS_HOME}/sencha"/>
		<property name="compass.command" value="compass"/>
		<property name="ruby.command" value="ruby"/>
	</target>

	<!-- (PRIVATE) Copies the Cordova build for iOS -->
	<target name="_cordova.copy.ios" if="${cordova.copy.ios.enabled}">
		<copy todir="${CORDOVA_IOS_PATH}">
			<fileset dir="${cordova.root.ios}/${type}"/>
		</copy>
	</target>

	<!-- (PRIVATE) Copies the Cordova build for Android -->
	<target name="_cordova.copy.android" if="${cordova.copy.android.enabled}">
		<copy todir="${CORDOVA_ANDROID_PATH}">
			<fileset dir="${cordova.root.android}/${type}"/>
		</copy>
	</target>

	<scriptdef name="build_app_for_os" language="javascript">
		<attribute name="app_file"/>
		<attribute name="os_app_file"/>
		<attribute name="common_app_file"/>
		<attribute name="type"/>

		<![CDATA[
			importClass(java.io.File);
			importClass(java.io.FileWriter);
			importClass(Packages.org.apache.tools.ant.util.FileUtils);

			function MergeRecursive(obj1, obj2) {
				for (var p in obj2) {
					try {
						if ( obj2[p].constructor == Array ) {
							if(obj1[p].constructor == Array){
							 	obj1[p] = obj2[p].concat(obj1[p])
							 }else{
							 	obj1[p] = obj2[p];
							 }
						}else if ( obj2[p].constructor==Object ) {
							obj1[p] = MergeRecursive(obj1[p], obj2[p]);
						} else {
							obj1[p] = obj2[p];
						}
					} catch(e) {
						obj1[p] = obj2[p];
					}
				}

				return obj1;
			}
			
			/*! JSON v3.2.3 | http://bestiejs.github.com/json3 | Copyright 2012, Kit Cambridge | http://kit.mit-license.org */;(function(){var e=void 0,i=!0,k=null,l={}.toString,m,n,o="function"===typeof define&&define.c,q="object"==typeof exports&&exports,r='{"A":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}',t,u,x,y,z,C,D,E,F,G,H,I,J,K,O,P=new Date(-3509827334573292),Q,R,S;try{P=-109252==P.getUTCFullYear()&&0===P.getUTCMonth()&&1==P.getUTCDate()&&10==P.getUTCHours()&&37==P.getUTCMinutes()&&6==P.getUTCSeconds()&&708==P.getUTCMilliseconds()}catch(T){}P||(Q=Math.floor,R=[0,31,59,90,120,151,181,212,243,273,304,334],S=function(b,c){return R[c]+365*(b-1970)+Q((b-1969+(c=+(1<c)))/4)-Q((b-1901+c)/100)+Q((b-1601+c)/400)});o||q?(o&&define("json",q={}),"object"==typeof JSON&&JSON&&(q.stringify=JSON.stringify,q.parse=JSON.parse)):q=this.JSON||(this.JSON={});if(t="function"==typeof q.stringify&&!S){(P=function(){return 1}).toJSON=P;try{t="0"===q.stringify(0)&&"0"===q.stringify(new Number)&&'""'==q.stringify(new String)&&q.stringify(l)===e&&q.stringify(e)===e&&q.stringify()===e&&"1"===q.stringify(P)&&"[1]"==q.stringify([P])&&"[null]"==q.stringify([e])&&"null"==q.stringify(k)&&"[null,null,null]"==q.stringify([e,l,k])&&q.stringify({result:[P,i,!1,k,"\x00\u0008\n\u000c\r\t"]})==r&&"1"===q.stringify(k,P)&&"[\n 1,\n 2\n]"==q.stringify([1,2],k,1)&&'"-271821-04-20T00:00:00.000Z"'==q.stringify(new Date(-864E13))&&'"+275760-09-13T00:00:00.000Z"'==q.stringify(new Date(864E13))&&'"-000001-01-01T00:00:00.000Z"'==q.stringify(new Date(-621987552E5))&&'"1969-12-31T23:59:59.999Z"'==q.stringify(new Date(-1))}catch(U){t=!1}}if("function"==typeof q.parse)try{if(0===q.parse("0")&&!q.parse(!1)&&(P=q.parse(r),C=5==P.a.length&&1==P.a[0])){try{C=!q.parse('"\t"')}catch(V){}if(C)try{C=1!=q.parse("01")}catch(W){}}}catch(X){C=!1}P=r=k;if(!t||!C){if(!(m={}.hasOwnProperty))m=function(b){var c={},a;if((c.__proto__=k,c.__proto__={toString:1},c).toString!=l)m=function(a){var b=this.__proto__,a=a in(this.__proto__=k,this);this.__proto__=b;return a};else{a=c.constructor;m=function(b){var c=(this.constructor||a).prototype;return b in this&&!(b in c&&this[b]===c[b])}}c=k;return m.call(this,b)};n=function(b,c){var a=0,d,j,f;(d=function(){this.valueOf=0}).prototype.valueOf=0;j=new d;for(f in j)m.call(j,f)&&a++;d=j=k;if(a)a=a==2?function(a,b){var c={},d=l.call(a)=="[object Function]",f;for(f in a)!(d&&f=="prototype")&&!m.call(c,f)&&(c[f]=1)&&m.call(a,f)&&b(f)}:function(a,b){var c=l.call(a)=="[object Function]",d,f;for(d in a)!(c&&d=="prototype")&&m.call(a,d)&&!(f=d==="constructor")&&b(d);(f||m.call(a,d="constructor"))&&b(d)};else{j=["valueOf","toString","toLocaleString","propertyIsEnumerable","isPrototypeOf","hasOwnProperty","constructor"];a=function(a,b){var c=l.call(a)=="[object Function]",d;for(d in a)!(c&&d=="prototype")&&m.call(a,d)&&b(d);for(c=j.length;d=j[--c];m.call(a,d)&&b(d));}}a(b,c)};t||(u={"\\":"\\\\",'"':'\\"',"\u0008":"\\b","\u000c":"\\f","\n":"\\n","\r":"\\r","\t":"\\t"},x=function(b,c){return("000000"+(c||0)).slice(-b)},y=function(b){for(var c='"',a=0,d;d=b.charAt(a);a++)c=c+('\\"\u0008\u000c\n\r\t'.indexOf(d)>-1?u[d]:d<" "?"\\u00"+x(2,d.charCodeAt(0).toString(16)):d);return c+'"'},z=function(b,c,a,d,j,f,p){var g=c[b],h,s,v,w,L,M,N,A,B;if(typeof g=="object"&&g){h=l.call(g);if(h=="[object Date]"&&!m.call(g,"toJSON"))if(g>-1/0&&g<1/0){if(S){v=Q(g/864E5);for(h=Q(v/365.2425)+1970-1;S(h+1,0)<=v;h++);for(s=Q((v-S(h,0))/30.42);S(h,s+1)<=v;s++);v=1+v-S(h,s);w=(g%864E5+864E5)%864E5;L=Q(w/36E5)%24;M=Q(w/6E4)%60;N=Q(w/1E3)%60;w=w%1E3}else{h=g.getUTCFullYear();s=g.getUTCMonth();v=g.getUTCDate();L=g.getUTCHours();M=g.getUTCMinutes();N=g.getUTCSeconds();w=g.getUTCMilliseconds()}g=(h<=0||h>=1E4?(h<0?"-":"+")+x(6,h<0?-h:h):x(4,h))+"-"+x(2,s+1)+"-"+x(2,v)+"T"+x(2,L)+":"+x(2,M)+":"+x(2,N)+"."+x(3,w)+"Z"}else g=k;else if(typeof g.toJSON=="function"&&(h!="[object Number]"&&h!="[object String]"&&h!="[object Array]"||m.call(g,"toJSON")))g=g.toJSON(b)}a&&(g=a.call(c,b,g));if(g===k)return"null";h=l.call(g);if(h=="[object Boolean]")return""+g;if(h=="[object Number]")return g>-1/0&&g<1/0?""+g:"null";if(h=="[object String]")return y(g);if(typeof g=="object"){for(b=p.length;b--;)if(p[b]===g)throw TypeError();p.push(g);A=[];c=f;f=f+j;if(h=="[object Array]"){s=0;for(b=g.length;s<b;B||(B=i),s++){h=z(s,g,a,d,j,f,p);A.push(h===e?"null":h)}return B?j?"[\n"+f+A.join(",\n"+f)+"\n"+c+"]":"["+A.join(",")+"]":"[]"}n(d||g,function(b){var c=z(b,g,a,d,j,f,p);c!==e&&A.push(y(b)+":"+(j?" ":"")+c);B||(B=i)});return B?j?"{\n"+f+A.join(",\n"+f)+"\n"+c+"}":"{"+A.join(",")+"}":"{}"}},q.stringify=function(b,c,a){var d,j,f,p,g,h;if(typeof c=="function"||typeof c=="object"&&c)if(l.call(c)=="[object Function]")j=c;else if(l.call(c)=="[object Array]"){f={};p=0;for(g=c.length;p<g;h=c[p++],(l.call(h)=="[object String]"||l.call(h)=="[object Number]")&&(f[h]=1));}if(a)if(l.call(a)=="[object Number]"){if((a=a-a%1)>0){d="";for(a>10&&(a=10);d.length<a;d=d+" ");}}else l.call(a)=="[object String]"&&(d=a.length<=10?a:a.slice(0,10));return z("",(h={},h[""]=b,h),j,f,d,"",[])});C||(D=String.fromCharCode,E={"\\":"\\",'"':'"',"/":"/",b:"\u0008",t:"\t",n:"\n",f:"\u000c",r:"\r"},F=function(){K=O=k;throw SyntaxError();},G=function(){for(var b=O,c=b.length,a,d,j,f,p;K<c;){a=b.charAt(K);if("\t\r\n ".indexOf(a)>-1)K++;else{if("{}[]:,".indexOf(a)>-1){K++;return a}if(a=='"'){d="@";for(K++;K<c;){a=b.charAt(K);if(a<" ")F();else if(a=="\\"){a=b.charAt(++K);if('\\"/btnfr'.indexOf(a)>-1){d=d+E[a];K++}else if(a=="u"){j=++K;for(f=K+4;K<f;K++){a=b.charAt(K);a>="0"&&a<="9"||a>="a"&&a<="f"||a>="A"&&a<="F"||F()}d=d+D("0x"+b.slice(j,K))}else F()}else{if(a=='"')break;d=d+a;K++}}if(b.charAt(K)=='"'){K++;return d}}else{j=K;if(a=="-"){p=i;a=b.charAt(++K)}if(a>="0"&&a<="9"){for(a=="0"&&(a=b.charAt(K+1),a>="0"&&a<="9")&&F();K<c&&(a=b.charAt(K),a>="0"&&a<="9");K++);if(b.charAt(K)=="."){for(f=++K;f<c&&(a=b.charAt(f),a>="0"&&a<="9");f++);f==K&&F();K=f}a=b.charAt(K);if(a=="e"||a=="E"){a=b.charAt(++K);(a=="+"||a=="-")&&K++;for(f=K;f<c&&(a=b.charAt(f),a>="0"&&a<="9");f++);f==K&&F();K=f}return+b.slice(j,K)}p&&F();if(b.slice(K,K+4)=="true"){K=K+4;return i}if(b.slice(K,K+5)=="false"){K=K+5;return false}if(b.slice(K,K+4)=="null"){K=K+4;return k}}F()}}return"$"},H=function(b){var c,a;b=="$"&&F();if(typeof b=="string"){if(b.charAt(0)=="@")return b.slice(1);if(b=="["){for(c=[];;a||(a=i)){b=G();if(b=="]")break;if(a)if(b==","){b=G();b=="]"&&F()}else F();b==","&&F();c.push(H(b))}return c}if(b=="{"){for(c={};;a||(a=i)){b=G();if(b=="}")break;if(a)if(b==","){b=G();b=="}"&&F()}else F();(b==","||typeof b!="string"||b.charAt(0)!="@"||G()!=":")&&F();c[b.slice(1)]=H(G())}return c}F()}return b},J=function(b,c,a){a=I(b,c,a);a===e?delete b[c]:b[c]=a},I=function(b,c,a){var d=b[c],j;if(typeof d=="object"&&d)if(l.call(d)=="[object Array]")for(j=d.length;j--;)J(d,j,a);else n(d,function(b){J(d,b,a)});return a.call(b,c,d)},q.parse=function(b,c){K=0;O=b;var a=H(G());G()!="$"&&F();K=O=k;return c&&l.call(c)=="[object Function]"?I((P={},P[""]=a,P),"",c):a})};}());

			var src, rdr,content, app_json, os_app_json;

			src = new File(attributes.get("app_file"));
			rdr = new java.io.FileReader(src);
			content = FileUtils.readFully(rdr);
			rdr.close();
			app_json = eval("(" + content + ")");
			self.log("Got Original App JSON");

			src = new File(".", attributes.get("os_app_file"));
			rdr = new java.io.FileReader(src);
			content = FileUtils.readFully(rdr);
			rdr.close();
			os_app_json = eval("(" + content + ")");
			self.log("Got OS Specific App JSON");

			out_app_json = os_app_json;
			if(attributes.get("common_app_file") != "NULL"){
				src = new File(".", attributes.get("common_app_file"));
				if(src.exists()){
					rdr = new java.io.FileReader(src);
					content = FileUtils.readFully(rdr);
					rdr.close();
					common_app_json = eval("(" + content + ")");
					self.log("Common File Merged");
					out_app_json = MergeRecursive(common_app_json,os_app_json);
				}else{
					self.log("Common app.json does not exist");
				}
			}

			out_app_json = MergeRecursive(app_json, out_app_json);
			if(!out_app_json.resources) out_app_json.resources = [];
			out_app_json.resources.push("cordova");

			dest = new File(attributes.get("app_file"));
			var writer = new FileWriter(dest);
			var final_json = JSON.stringify(out_app_json);
			writer.write(final_json);
			writer.close();
			self.log("Wrote Merged App JSON");

			antcallTask=project.createTask("antcall");
			antcallTask.init();
			antcallTask.setTarget("_sencha.build");
			antcallParam1=antcallTask.createParam();
			antcallParam1.setName("buildType");
			antcallParam1.setValue(attributes.get("type"));
			antcallTask.execute();
		]]>
	</scriptdef>
</project>